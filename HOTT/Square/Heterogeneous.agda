{-# OPTIONS --exact-split --type-in-type --rewriting --two-level --without-K --no-import-sorts #-}

module HOTT.Square.Heterogeneous where

open import HOTT.Base
open import HOTT.Id
open import HOTT.Universe
open import HOTT.Square.Simple
open import HOTT.Exonat
--open import HOTT.Sqrt

------------------------------
-- Id-Id in the universe
------------------------------

-- This is the identity types of ‚âä, computed as if it were a Œ£-type.
record Id‚âä {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ : Type} (A‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÄ Ôºù A‚ÇÄ‚ÇÅ) {A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÄ Ôºù A‚ÇÅ‚ÇÅ)
  (A‚ÇÇ‚ÇÄ : A‚ÇÄ‚ÇÄ ‚âä A‚ÇÅ‚ÇÄ) (A‚ÇÇ‚ÇÅ : A‚ÇÄ‚ÇÅ ‚âä A‚ÇÅ‚ÇÅ) : Type where
  constructor Id‚âä[_,_,_,_,_]
  field
    ap-Ôºè : {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} (a‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ)
            {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
            (A‚ÇÇ‚ÇÄ Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) Ôºù (A‚ÇÇ‚ÇÅ Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ)
    ap-coe‚Üí : {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} (a‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) ‚Üí
      A‚ÇÅ‚ÇÇ ‚Üì Ôºè coe‚áí A‚ÇÇ‚ÇÄ ‚àô a‚ÇÄ‚ÇÄ ÔΩû coe‚áí A‚ÇÇ‚ÇÅ ‚àô a‚ÇÄ‚ÇÅ
    ap-coe‚Üê : {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
      A‚ÇÄ‚ÇÇ ‚Üì Ôºè coe‚áê A‚ÇÇ‚ÇÄ ‚àô a‚ÇÅ‚ÇÄ ÔΩû coe‚áê A‚ÇÇ‚ÇÅ ‚àô a‚ÇÅ‚ÇÅ
    ap-push‚Üí : {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} (a‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) ‚Üí
      ap-Ôºè a‚ÇÄ‚ÇÇ (ap-coe‚Üí a‚ÇÄ‚ÇÇ) ‚Üì Ôºè push‚áí A‚ÇÇ‚ÇÄ ‚àô a‚ÇÄ‚ÇÄ ÔΩû push‚áí A‚ÇÇ‚ÇÅ ‚àô a‚ÇÄ‚ÇÅ
    ap-push‚Üê : {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
      ap-Ôºè (ap-coe‚Üê a‚ÇÅ‚ÇÇ) a‚ÇÅ‚ÇÇ ‚Üì Ôºè push‚áê A‚ÇÇ‚ÇÄ ‚àô a‚ÇÅ‚ÇÄ ÔΩû push‚áê A‚ÇÇ‚ÇÅ ‚àô a‚ÇÅ‚ÇÅ
open Id‚âä public

postulate
  Ôºù-‚âä : {A B : Type} (e‚ÇÄ e‚ÇÅ : A ‚âä B) ‚Üí
    (e‚ÇÄ Ôºù e‚ÇÅ) ‚â° Id‚âä (refl A) (refl B) e‚ÇÄ e‚ÇÅ
  Id-‚âä : {Œî : Type} (A B : Œî ‚Üí Type) {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ)
    (e‚ÇÄ : A Œ¥‚ÇÄ ‚âä B Œ¥‚ÇÄ) (e‚ÇÅ : A Œ¥‚ÇÅ ‚âä B Œ¥‚ÇÅ) ‚Üí
    Id (Œª Œ¥ ‚Üí A Œ¥ ‚âä B Œ¥) Œ¥‚ÇÇ e‚ÇÄ e‚ÇÅ ‚â° Id‚âä (ap A Œ¥‚ÇÇ) (ap B Œ¥‚ÇÇ) e‚ÇÄ e‚ÇÅ
{-# REWRITE Ôºù-‚âä Id-‚âä #-}

-- TODO: compute ap and refl on all the constructors and fields of ‚âä.
-- Also deal with the higher identity types of ‚âä too.

------------------------------
-- Computing gKan on ùê¨
------------------------------

-- This is nice and fast when written with pattern-matching, but
-- prohibitively slow when written with projections.  Since our
-- Œ£-types don't have Œ∑, that could conceivably be a problem, but
-- there's a chance that in practice we'll only be applying this to
-- actual tuples.
gKanùê¨ : (n : ‚Ñï·µâ) ‚Üí ‚àÇU (ùê¨ (ùê¨ n)) ‚Üí Type
gKanùê¨ n ((A‚ÇÄ‚ÇÄ , A‚ÇÅ‚ÇÄ , A‚ÇÇ‚ÇÄ , a‚ÇÄ‚ÇÄ , a‚ÇÅ‚ÇÄ) , (A‚ÇÄ‚ÇÅ , A‚ÇÅ‚ÇÅ , A‚ÇÇ‚ÇÅ , a‚ÇÄ‚ÇÅ , a‚ÇÅ‚ÇÅ) , (A‚ÇÄ‚ÇÇ , A‚ÇÅ‚ÇÇ , A‚ÇÇ‚ÇÇ , a‚ÇÄ‚ÇÇ , a‚ÇÅ‚ÇÇ) , (a‚ÇÇ‚ÇÄ , a‚ÇÇ‚ÇÅ)) =
  Id (gKan n) {A‚ÇÄ‚ÇÄ , A‚ÇÄ‚ÇÅ , A‚ÇÄ‚ÇÇ , a‚ÇÄ‚ÇÄ , a‚ÇÄ‚ÇÅ} {A‚ÇÅ‚ÇÄ , A‚ÇÅ‚ÇÅ , A‚ÇÅ‚ÇÇ , a‚ÇÅ‚ÇÄ , a‚ÇÅ‚ÇÅ}
     (A‚ÇÇ‚ÇÄ , A‚ÇÇ‚ÇÅ , sym (‚àÇU n) ‚îå‚îÄ  A‚ÇÅ‚ÇÇ  ‚îÄ‚îê
                             A‚ÇÇ‚ÇÄ  ‚ñ°  A‚ÇÇ‚ÇÅ
                             ‚îî‚îÄ  A‚ÇÄ‚ÇÇ  ‚îÄ‚îò  A‚ÇÇ‚ÇÇ , a‚ÇÇ‚ÇÄ , a‚ÇÇ‚ÇÅ)
     (snd (kan {ùê¨ n} a‚ÇÄ‚ÇÇ)) (snd (kan {ùê¨ n} a‚ÇÅ‚ÇÇ))

postulate
  gKan-ùê¨ : {n : ‚Ñï·µâ} (A : ‚àÇU (ùê¨ (ùê¨ n))) ‚Üí
    gKan (ùê¨ n) A ‚â° gKanùê¨ n A
{-# REWRITE gKan-ùê¨ #-}

----------------------------------------
-- Heterogeneous squares
----------------------------------------

record ‚àÇ ∞ {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  (a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ) (a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ) (a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ) (a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ) : Type·µâ where
  constructor ‚îè‚îÅ_‚îÅ‚îì_‚ñ°_‚îó‚îÅ_‚îÅ‚îõ
  infix 70 _‚ÇÅ‚ÇÇ _‚ÇÇ‚ÇÄ _‚ÇÇ‚ÇÅ _‚ÇÄ‚ÇÇ
  field
    _‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ
    _‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ
    _‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ
    _‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ
open ‚àÇ ∞ public

sym-‚àÇ ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} {A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ} {A‚ÇÇ‚ÇÇ : Sq Type A}
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} ‚Üí
  ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ ‚Üí ‚àÇ ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ
sym-‚àÇ ∞ a = ‚îè‚îÅ   a ‚ÇÇ‚ÇÅ   ‚îÅ‚îì
           a ‚ÇÄ‚ÇÇ  ‚ñ°   a ‚ÇÅ‚ÇÇ
           ‚îó‚îÅ   a ‚ÇÇ‚ÇÄ   ‚îÅ‚îõ

Sq ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ) ‚Üí Type
Sq ∞ {A‚ÇÄ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A‚ÇÅ‚ÇÄ} {A‚ÇÅ‚ÇÅ} A A‚ÇÇ‚ÇÇ {a‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ} a =
  ap-Ôºè {A‚ÇÄ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A ‚ÇÄ‚ÇÇ} {A‚ÇÅ‚ÇÄ} {A‚ÇÅ‚ÇÅ} {A ‚ÇÅ‚ÇÇ} {A ‚ÇÇ‚ÇÄ ‚Üì} {A ‚ÇÇ‚ÇÅ ‚Üì} (snd (fst (kan {ùê¨ (ùê¨ ùê≥)} A‚ÇÇ‚ÇÇ)))
    {a‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ} (a ‚ÇÄ‚ÇÇ) {a‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ} (a ‚ÇÅ‚ÇÇ) ‚Üì Ôºè a ‚ÇÇ‚ÇÄ ÔΩû (a ‚ÇÇ‚ÇÅ)

-- The other component of kan is a primitive symmetrized square.  The
-- two are interchanged by symmetry acting on U, and are isomorphic to
-- each other by a postulated heterogeneous symmetry.

Sym ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ) ‚Üí Type
Sym ∞ {A‚ÇÄ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A‚ÇÅ‚ÇÄ} {A‚ÇÅ‚ÇÅ} A A‚ÇÇ‚ÇÇ {a‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ} a =
  ap-Ôºè {A‚ÇÄ‚ÇÄ} {A‚ÇÅ‚ÇÄ} {A ‚ÇÇ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A‚ÇÅ‚ÇÅ} {A ‚ÇÇ‚ÇÅ} {A ‚ÇÄ‚ÇÇ ‚Üì} {A ‚ÇÅ‚ÇÇ ‚Üì} (snd (kan {ùê¨ (ùê¨ ùê≥)} A‚ÇÇ‚ÇÇ))
    {a‚ÇÄ‚ÇÄ} {a‚ÇÅ‚ÇÄ} (a ‚ÇÇ‚ÇÄ) {a‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÅ} (a ‚ÇÇ‚ÇÅ) ‚Üì Ôºè a ‚ÇÄ‚ÇÇ ÔΩû (a ‚ÇÅ‚ÇÇ)

-- TODO: Heterogeneous squares in refl-refl are ordinary squares

-- TODO: Heterogeneous squares in ap-ap are dependent squares

------------------------------
-- Heterogeneous symmetry
------------------------------

postulate
  sym ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
    {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ) ‚Üí
    Sq ∞ A A‚ÇÇ‚ÇÇ a ‚Üí Sym ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) (sym-‚àÇ ∞ a)
  unsym ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
    {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ) ‚Üí
    Sym ∞ A A‚ÇÇ‚ÇÇ a ‚Üí Sq ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) (sym-‚àÇ ∞ a)
postulate
  unsym-sym ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
    {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ)
    (a‚ÇÇ‚ÇÇ : Sq ∞ A A‚ÇÇ‚ÇÇ a) ‚Üí
    -- This might need some green slime removed.
    unsym ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) (sym-‚àÇ ∞ a) (sym ∞ A A‚ÇÇ‚ÇÇ a a‚ÇÇ‚ÇÇ) ‚â° a‚ÇÇ‚ÇÇ
  sym-unsym ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
    {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ)
    (a‚ÇÇ‚ÇÇ : Sym ∞ A A‚ÇÇ‚ÇÇ a) ‚Üí
    -- This might need some green slime removed.
    sym ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) (sym-‚àÇ ∞ a) (unsym ∞ A A‚ÇÇ‚ÇÇ a a‚ÇÇ‚ÇÇ) ‚â° a‚ÇÇ‚ÇÇ
{-# REWRITE unsym-sym ∞ sym-unsym ∞ #-}

-- TODO: sym ∞ computes on ap to sym·µà, and on refl to sym.

--------------------------------------------------
-- Heterogeneous composition and filling
--------------------------------------------------

ID ∞ : Type
ID ∞ = Ôºà A‚ÇÄ ‚¶Ç Type Ôºâ√ó Ôºà A‚ÇÅ ‚¶Ç Type Ôºâ√ó Ôºà A‚ÇÇ ‚¶Ç A‚ÇÄ Ôºù A‚ÇÅ Ôºâ√ó A‚ÇÄ √ó A‚ÇÅ

Id ∞ : ID ∞ ‚Üí Type
Id ∞ A = ‚ÇÉrd A ‚Üì Ôºè ‚ÇÑth A ÔΩû ‚ÇÖth' A

module _  {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} where

  comp ∞‚Üí : (a‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) (a‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) (a‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) ‚Üí
    A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ
  comp ∞‚Üí a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÄ = tr‚áí Id ∞ {A‚ÇÄ‚ÇÄ , A‚ÇÅ‚ÇÄ , A ‚ÇÇ‚ÇÄ , a‚ÇÄ‚ÇÄ , a‚ÇÅ‚ÇÄ} {A‚ÇÄ‚ÇÅ , A‚ÇÅ‚ÇÅ , A ‚ÇÇ‚ÇÅ , a‚ÇÄ‚ÇÅ , a‚ÇÅ‚ÇÅ} (A ‚ÇÄ‚ÇÇ , A ‚ÇÅ‚ÇÇ , A‚ÇÇ‚ÇÇ , a‚ÇÄ‚ÇÇ , a‚ÇÅ‚ÇÇ) ‚àô a‚ÇÇ‚ÇÄ

  -- Needs a rule for Id in _Ôºè_ÔΩû_, which is an analogue of ap on it.
  fill ∞‚Üí : (a‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) (a‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) (a‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) ‚Üí
    Sq ∞ A A‚ÇÇ‚ÇÇ ‚îè‚îÅ   a‚ÇÅ‚ÇÇ   ‚îÅ‚îì
              a‚ÇÇ‚ÇÄ  ‚ñ°   comp ∞‚Üí a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÄ
              ‚îó‚îÅ   a‚ÇÄ‚ÇÇ   ‚îÅ‚îõ
  fill ∞‚Üí a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÄ = {!lift‚áí Id ∞ {A‚ÇÄ‚ÇÄ , A‚ÇÅ‚ÇÄ , A ‚ÇÇ‚ÇÄ , a‚ÇÄ‚ÇÄ , a‚ÇÅ‚ÇÄ} {A‚ÇÄ‚ÇÅ , A‚ÇÅ‚ÇÅ , A ‚ÇÇ‚ÇÅ , a‚ÇÄ‚ÇÅ , a‚ÇÅ‚ÇÅ} (A ‚ÇÄ‚ÇÇ , A ‚ÇÅ‚ÇÇ , A‚ÇÇ‚ÇÇ , a‚ÇÄ‚ÇÇ , a‚ÇÅ‚ÇÇ) ‚àô a‚ÇÇ‚ÇÄ!}

  comp ∞‚Üê : (a‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) (a‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) (a‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
    A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ
  comp ∞‚Üê a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÅ = tr‚áê Id ∞ {A‚ÇÄ‚ÇÄ , A‚ÇÅ‚ÇÄ , A ‚ÇÇ‚ÇÄ , a‚ÇÄ‚ÇÄ , a‚ÇÅ‚ÇÄ} {A‚ÇÄ‚ÇÅ , A‚ÇÅ‚ÇÅ , A ‚ÇÇ‚ÇÅ , a‚ÇÄ‚ÇÅ , a‚ÇÅ‚ÇÅ} (A ‚ÇÄ‚ÇÇ , A ‚ÇÅ‚ÇÇ , A‚ÇÇ‚ÇÇ , a‚ÇÄ‚ÇÇ , a‚ÇÅ‚ÇÇ) ‚àô a‚ÇÇ‚ÇÅ

  fill ∞‚Üê : (a‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) (a‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) (a‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
    Sq ∞ A A‚ÇÇ‚ÇÇ ‚îè‚îÅ                 a‚ÇÅ‚ÇÇ   ‚îÅ‚îì
              comp ∞‚Üê a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÅ  ‚ñ°    a‚ÇÇ‚ÇÅ
              ‚îó‚îÅ                 a‚ÇÄ‚ÇÇ   ‚îÅ‚îõ
  fill ∞‚Üê a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÅ = {!lift‚áê Id ∞ {A‚ÇÄ‚ÇÄ , A‚ÇÅ‚ÇÄ , A ‚ÇÇ‚ÇÄ , a‚ÇÄ‚ÇÄ , a‚ÇÅ‚ÇÄ} {A‚ÇÄ‚ÇÅ , A‚ÇÅ‚ÇÅ , A ‚ÇÇ‚ÇÅ , a‚ÇÄ‚ÇÅ , a‚ÇÅ‚ÇÅ} (A ‚ÇÄ‚ÇÇ , A ‚ÇÅ‚ÇÇ , A‚ÇÇ‚ÇÇ , a‚ÇÄ‚ÇÇ , a‚ÇÅ‚ÇÇ) ‚àô a‚ÇÇ‚ÇÅ!}

module _  {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} where

  comp ∞‚Üë : (a‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) (a‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) (a‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
    A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ
  comp ∞‚Üë a‚ÇÄ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ = comp ∞‚Üí (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ a‚ÇÄ‚ÇÇ

  fill ∞‚Üë : (a‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) (a‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) (a‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
    Sq ∞ A A‚ÇÇ‚ÇÇ ‚îè‚îÅ  comp ∞‚Üë a‚ÇÄ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ   ‚îÅ‚îì
              a‚ÇÇ‚ÇÄ         ‚ñ°           a‚ÇÇ‚ÇÅ
              ‚îó‚îÅ         a‚ÇÄ‚ÇÇ          ‚îÅ‚îõ
  fill ∞‚Üë a‚ÇÄ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ = unsym ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) ‚îè‚îÅ   a‚ÇÇ‚ÇÅ   ‚îÅ‚îì
                                                         a‚ÇÄ‚ÇÇ  ‚ñ°   comp ∞‚Üë a‚ÇÄ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ
                                                         ‚îó‚îÅ   a‚ÇÇ‚ÇÄ   ‚îÅ‚îõ
  -- Need a version of (fill ∞‚Üí (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ a‚ÇÄ‚ÇÇ)
  -- that lies in Sym ∞.  Maybe this means comp ∞‚Üë should be defined
  -- using Sym ∞ rather than Id ∞?
                       {!!}

  comp ∞‚Üì : (a‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) (a‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) (a‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
     A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ
  comp ∞‚Üì a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ = comp ∞‚Üê (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ a‚ÇÅ‚ÇÇ

  fill ∞‚Üì : (a‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) (a‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) (a‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
    Sq ∞ A A‚ÇÇ‚ÇÇ ‚îè‚îÅ         a‚ÇÅ‚ÇÇ           ‚îÅ‚îì
              a‚ÇÇ‚ÇÄ         ‚ñ°           a‚ÇÇ‚ÇÅ
              ‚îó‚îÅ  comp ∞‚Üì a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ   ‚îÅ‚îõ
  fill ∞‚Üì a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ = unsym ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) ‚îè‚îÅ                 a‚ÇÇ‚ÇÅ   ‚îÅ‚îì
                                                         comp ∞‚Üì a‚ÇÅ‚ÇÇ a‚ÇÇ‚ÇÄ a‚ÇÇ‚ÇÅ  ‚ñ°   a‚ÇÅ‚ÇÇ
                                                         ‚îó‚îÅ                a‚ÇÇ‚ÇÄ   ‚îÅ‚îõ
                       {!!}
