{-# OPTIONS --exact-split --type-in-type --rewriting --two-level --without-K --no-import-sorts #-}

module HOTT.Square.Heterogeneous.Base where

open import HOTT.Base
open import HOTT.Id
open import HOTT.Universe
open import HOTT.Square.Simple
open import HOTT.Exonat

------------------------------
-- Id-Id in the universe
------------------------------

-- This is the identity types of ‚âä, computed as if it were a Œ£-type.
-- TODO: This needs to be a datatype too.  And, of course, its identity types...
record Id‚âä {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ : Type} (A‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÄ Ôºù A‚ÇÄ‚ÇÅ) {A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÄ Ôºù A‚ÇÅ‚ÇÅ)
  (A‚ÇÇ‚ÇÄ : A‚ÇÄ‚ÇÄ ‚âä A‚ÇÅ‚ÇÄ) (A‚ÇÇ‚ÇÅ : A‚ÇÄ‚ÇÅ ‚âä A‚ÇÅ‚ÇÅ) : Type where
  constructor Id‚âä[_,_,_,_,_]
  field
    ap-Ôºè : {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} (a‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ)
            {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
            (A‚ÇÇ‚ÇÄ Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ) Ôºù (A‚ÇÇ‚ÇÅ Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ)
    ap-coe‚Üí : {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} (a‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) ‚Üí
      A‚ÇÅ‚ÇÇ ‚Üì Ôºè coe‚áí A‚ÇÇ‚ÇÄ ‚àô a‚ÇÄ‚ÇÄ ÔΩû coe‚áí A‚ÇÇ‚ÇÅ ‚àô a‚ÇÄ‚ÇÅ
    ap-coe‚Üê : {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
      A‚ÇÄ‚ÇÇ ‚Üì Ôºè coe‚áê A‚ÇÇ‚ÇÄ ‚àô a‚ÇÅ‚ÇÄ ÔΩû coe‚áê A‚ÇÇ‚ÇÅ ‚àô a‚ÇÅ‚ÇÅ
    ap-push‚Üí : {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} (a‚ÇÄ‚ÇÇ : A‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ) ‚Üí
      ap-Ôºè a‚ÇÄ‚ÇÇ (ap-coe‚Üí a‚ÇÄ‚ÇÇ) ‚Üì Ôºè push‚áí A‚ÇÇ‚ÇÄ ‚àô a‚ÇÄ‚ÇÄ ÔΩû push‚áí A‚ÇÇ‚ÇÅ ‚àô a‚ÇÄ‚ÇÅ
    ap-push‚Üê : {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a‚ÇÅ‚ÇÇ : A‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ) ‚Üí
      ap-Ôºè (ap-coe‚Üê a‚ÇÅ‚ÇÇ) a‚ÇÅ‚ÇÇ ‚Üì Ôºè push‚áê A‚ÇÇ‚ÇÄ ‚àô a‚ÇÅ‚ÇÄ ÔΩû push‚áê A‚ÇÇ‚ÇÅ ‚àô a‚ÇÅ‚ÇÅ
open Id‚âä public

postulate
  Ôºù-‚âä : {A B : Type} (e‚ÇÄ e‚ÇÅ : A ‚âä B) ‚Üí
    (e‚ÇÄ Ôºù e‚ÇÅ) ‚â° Id‚âä (refl A) (refl B) e‚ÇÄ e‚ÇÅ
  Id-‚âä : {Œî : Type} (A B : Œî ‚Üí Type) {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ)
    (e‚ÇÄ : A Œ¥‚ÇÄ ‚âä B Œ¥‚ÇÄ) (e‚ÇÅ : A Œ¥‚ÇÅ ‚âä B Œ¥‚ÇÅ) ‚Üí
    Id (Œª Œ¥ ‚Üí A Œ¥ ‚âä B Œ¥) Œ¥‚ÇÇ e‚ÇÄ e‚ÇÅ ‚â° Id‚âä (ap A Œ¥‚ÇÇ) (ap B Œ¥‚ÇÇ) e‚ÇÄ e‚ÇÅ
{-# REWRITE Ôºù-‚âä Id-‚âä #-}

-- TODO: compute ap and refl on all the constructors and fields of ‚âä.
-- Also deal with the higher identity types of ‚âä too.

-- Here's part of this, an Id analogue of the putative ap on _Ôºè_ÔΩû_.
postulate
  Id-Ôºè : {Œî : Type} {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ)
    (A B : Œî ‚Üí Type) (e : (Œ¥ : Œî) ‚Üí A Œ¥ ‚âä B Œ¥)
    (a : (Œ¥ : Œî) ‚Üí A Œ¥) (b : (Œ¥ : Œî) ‚Üí B Œ¥)
    (u‚ÇÄ : e Œ¥‚ÇÄ Ôºè a Œ¥‚ÇÄ ÔΩû b Œ¥‚ÇÄ) (u‚ÇÅ : e Œ¥‚ÇÅ Ôºè a Œ¥‚ÇÅ ÔΩû b Œ¥‚ÇÅ) ‚Üí
    Id (Œª Œ¥ ‚Üí e Œ¥ Ôºè a Œ¥ ÔΩû b Œ¥) Œ¥‚ÇÇ u‚ÇÄ u‚ÇÅ ‚â°
    (snd (kan {ùê¨ ùê≥} (‚òÖ ‚∏¥ ‚òÖ ‚∏¥ ‚òÖ ‚∏¥ _ ‚∏¥ _ , ap-Ôºè (ap e Œ¥‚ÇÇ) (ap a Œ¥‚ÇÇ) (ap b Œ¥‚ÇÇ))) Ôºè u‚ÇÄ ÔΩû u‚ÇÅ)
{-# REWRITE Id-Ôºè #-}

------------------------------
-- Computing gKan on ùê¨
------------------------------

postulate
  gKan-ùê¨ : (n : ‚Ñï·µâ) (A : ‚àÇU (ùê¨ (ùê¨ n))) ‚Üí gKan (ùê¨ n) A ‚â°
    Id (gKan n)
    {A !‚ÇÄ !‚ÇÄ ‚∏¥ A !‚ÇÅ !‚ÇÄ ‚∏¥ A !‚ÇÇ !‚ÇÄ ‚∏¥ A !‚ÇÄ !‚Å∞ ‚∏¥ A !‚ÇÅ !‚Å∞}
    {A !‚ÇÄ !‚ÇÅ ‚∏¥ A !‚ÇÅ !‚ÇÅ ‚∏¥ A !‚ÇÇ !‚ÇÅ ‚∏¥ A !‚ÇÄ !¬π ‚∏¥ A !‚ÇÅ !¬π}
    (A !‚ÇÄ !‚ÇÇ ‚∏¥ A !‚ÇÅ !‚ÇÇ ‚∏¥
    sym (‚àÇU n) ‚îå‚îÄ    A !‚ÇÇ !‚ÇÅ    ‚îÄ‚îê
               A !‚ÇÄ !‚ÇÇ  ‚ñ°  A !‚ÇÅ !‚ÇÇ
               ‚îî‚îÄ    A !‚ÇÇ !‚ÇÄ    ‚îÄ‚îò (A !‚ÇÇ !‚ÇÇ) ‚∏¥
    A !‚Å∞ ‚∏¥ A !¬π)
    (snd (kan {ùê¨ n} (A !‚ÇÄ !‚ÇÄ ‚∏¥ A !‚ÇÅ !‚ÇÄ ‚∏¥ A !‚ÇÇ !‚ÇÄ ‚∏¥ A !‚ÇÄ !‚Å∞ ‚∏¥ A !‚ÇÅ !‚Å∞ , A !‚ÇÇ !‚Å∞)))
    (snd (kan {ùê¨ n} (A !‚ÇÄ !‚ÇÅ ‚∏¥ A !‚ÇÅ !‚ÇÅ ‚∏¥ A !‚ÇÇ !‚ÇÅ ‚∏¥ A !‚ÇÄ !¬π ‚∏¥ A !‚ÇÅ !¬π , A !‚ÇÇ !¬π)))
{-# REWRITE gKan-ùê¨ #-}

{-
----------------------------------------
-- Heterogeneous squares
----------------------------------------

record ‚àÇ ∞ {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  (a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ) (a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ) (a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ) (a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ) : Type·µâ where
  constructor ‚îè‚îÅ_‚îÅ‚îì_‚ñ°_‚îó‚îÅ_‚îÅ‚îõ
  infix 70 _‚ÇÅ‚ÇÇ _‚ÇÇ‚ÇÄ _‚ÇÇ‚ÇÅ _‚ÇÄ‚ÇÇ
  field
    _‚ÇÅ‚ÇÇ : A ‚ÇÅ‚ÇÇ ‚Üì Ôºè a‚ÇÅ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÅ
    _‚ÇÇ‚ÇÄ : A ‚ÇÇ‚ÇÄ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÅ‚ÇÄ
    _‚ÇÇ‚ÇÅ : A ‚ÇÇ‚ÇÅ ‚Üì Ôºè a‚ÇÄ‚ÇÅ ÔΩû a‚ÇÅ‚ÇÅ
    _‚ÇÄ‚ÇÇ : A ‚ÇÄ‚ÇÇ ‚Üì Ôºè a‚ÇÄ‚ÇÄ ÔΩû a‚ÇÄ‚ÇÅ
open ‚àÇ ∞ public

sym-‚àÇ ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} {A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ} {A‚ÇÇ‚ÇÇ : Sq Type A}
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} ‚Üí
  ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ ‚Üí ‚àÇ ∞ (sym-‚àÇ A) (sym Type A A‚ÇÇ‚ÇÇ) a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ
sym-‚àÇ ∞ a = ‚îè‚îÅ   a ‚ÇÇ‚ÇÅ   ‚îÅ‚îì
           a ‚ÇÄ‚ÇÇ  ‚ñ°   a ‚ÇÅ‚ÇÇ
           ‚îó‚îÅ   a ‚ÇÇ‚ÇÄ   ‚îÅ‚îõ

Sq ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ) ‚Üí Type
Sq ∞ {A‚ÇÄ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A‚ÇÅ‚ÇÄ} {A‚ÇÅ‚ÇÅ} A A‚ÇÇ‚ÇÇ {a‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ} a =
  ap-Ôºè {A‚ÇÄ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A ‚ÇÄ‚ÇÇ} {A‚ÇÅ‚ÇÄ} {A‚ÇÅ‚ÇÅ} {A ‚ÇÅ‚ÇÇ} {A ‚ÇÇ‚ÇÄ ‚Üì} {A ‚ÇÇ‚ÇÅ ‚Üì}
    (snd (fst (kan {ùê¨ (ùê¨ ùê≥)} ((A‚ÇÄ‚ÇÄ , A‚ÇÅ‚ÇÄ , A ‚ÇÇ‚ÇÄ) , (A‚ÇÄ‚ÇÅ , A‚ÇÅ‚ÇÅ , A ‚ÇÇ‚ÇÅ) , (A ‚ÇÄ‚ÇÇ , A ‚ÇÅ‚ÇÇ , A‚ÇÇ‚ÇÇ)))))
    {a‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ} (a ‚ÇÄ‚ÇÇ) {a‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ} (a ‚ÇÅ‚ÇÇ) ‚Üì Ôºè a ‚ÇÇ‚ÇÄ ÔΩû (a ‚ÇÇ‚ÇÅ)

-- The other component of kan is a primitive symmetrized square.  The
-- two are interchanged by symmetry acting on U, and are isomorphic to
-- each other by a postulated heterogeneous symmetry.

Sym ∞ : {A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ : Type} (A : ‚àÇ Type A‚ÇÄ‚ÇÄ A‚ÇÄ‚ÇÅ A‚ÇÅ‚ÇÄ A‚ÇÅ‚ÇÅ) (A‚ÇÇ‚ÇÇ : Sq Type A)
  {a‚ÇÄ‚ÇÄ : A‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ : A‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ : A‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ : A‚ÇÅ‚ÇÅ} (a : ‚àÇ ∞ A A‚ÇÇ‚ÇÇ a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ) ‚Üí Type
Sym ∞ {A‚ÇÄ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A‚ÇÅ‚ÇÄ} {A‚ÇÅ‚ÇÅ} A A‚ÇÇ‚ÇÇ {a‚ÇÄ‚ÇÄ} {a‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÄ} {a‚ÇÅ‚ÇÅ} a =
  ap-Ôºè {A‚ÇÄ‚ÇÄ} {A‚ÇÅ‚ÇÄ} {A ‚ÇÇ‚ÇÄ} {A‚ÇÄ‚ÇÅ} {A‚ÇÅ‚ÇÅ} {A ‚ÇÇ‚ÇÅ} {A ‚ÇÄ‚ÇÇ ‚Üì} {A ‚ÇÅ‚ÇÇ ‚Üì}
    (snd (kan {ùê¨ (ùê¨ ùê≥)} ((A‚ÇÄ‚ÇÄ , A‚ÇÅ‚ÇÄ , A ‚ÇÇ‚ÇÄ) , (A‚ÇÄ‚ÇÅ , A‚ÇÅ‚ÇÅ , A ‚ÇÇ‚ÇÅ) , (A ‚ÇÄ‚ÇÇ , A ‚ÇÅ‚ÇÇ , A‚ÇÇ‚ÇÇ))))
    {a‚ÇÄ‚ÇÄ} {a‚ÇÅ‚ÇÄ} (a ‚ÇÇ‚ÇÄ) {a‚ÇÄ‚ÇÅ} {a‚ÇÅ‚ÇÅ} (a ‚ÇÇ‚ÇÅ) ‚Üì Ôºè a ‚ÇÄ‚ÇÇ ÔΩû (a ‚ÇÅ‚ÇÇ)

-- TODO: Heterogeneous squares in refl-refl are ordinary squares

-- TODO: Heterogeneous squares in ap-ap are dependent squares

-}
