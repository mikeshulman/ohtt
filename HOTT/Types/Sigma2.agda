{-# OPTIONS --exact-split --type-in-type --rewriting --two-level --without-K --no-import-sorts #-}

module HOTT.Types.Sigma2 where

open import HOTT.Rewrite
open import HOTT.Identity
open import HOTT.Telescope
open import HOTT.Types.Pi
open import HOTT.Types.Sigma
open import HOTT.Types.Universe
open import HOTT.Types.Pi2

--------------------------------------------------
-- Identity types of dependent Œ£-types
--------------------------------------------------

postulate
  ÔºùŒ£ : (A : Type) (B : A ‚Üí Type) (u v : Œ£ A B) ‚Üí
    (u Ôºù v) ‚â° Ôºà p ‚¶Ç fst u Ôºù fst v Ôºâ√ó Id (∆õ x ‚áí B x) p (snd u) (snd v)

{-# REWRITE ÔºùŒ£ #-}

-- This computes as expected in the non-dependent case
Ôºù√ó : (A B : Type) (u v : A √ó B) ‚Üí (u Ôºù v) ‚â° ((fst u Ôºù fst v) √ó (snd u Ôºù snd v))
Ôºù√ó A B u v = refl·µâ

-- In the RHS of "refl," we want to write (refl b).  That is well-typed
-- when B belongs to the object-level function-type (A ‚áí Type),
-- because in that case the type (_Ôºù_ {B ‚àô a} b b) of (refl b)
-- computes ("backwards") to what's expected.  But since we want "refl,"
-- to fire on arbitrary Œ£-types, which we had to define as
-- parametrized by a framework-level function-type, we can't just
-- write (refl b).  Instead we prove a lemma that frobnicates (refl b)
-- to have the correct type for an object-level function-type, then
-- call it with an abstracted argument.
frob-refl : {A : Type} (B : A ‚áí Type) (a : A) (b : B ‚àô a) ‚Üí
  (refl (ùö≤ (Œª x ‚Üí B ‚àô (top {Œµ} {Œõ _ ‚á® A} x))) ‚äò ([] ‚à∑ a ‚à∑ a ‚à∑ refl a)) // b ~ b
frob-refl B a b = refl b

postulate
  refl, : (A : Type) (B : A ‚Üí Type) (a : A) (b : B a) ‚Üí refl {Œ£ A B} (a , b) ‚â° (refl a , frob-refl (ùõå B) a b)
  refl-fst : (A : Type) (B : A ‚Üí Type) (u : Œ£ A B) ‚Üí refl (fst u) ‚â° fst (refl u)

{-# REWRITE refl, refl-fst #-}

frob-refl-snd : {A : Type} (B : A ‚áí Type) (u : Ôºà x ‚¶Ç A Ôºâ√ó B ‚àô x) ‚Üí snd u Ôºù snd u
frob-refl-snd B u = {!snd (refl u)!}

postulate
  refl-snd : (A : Type) (B : A ‚Üí Type) (u : Œ£ A B) ‚Üí refl (snd u) ‚â° {!snd (refl u)!}


----------------------------------------
-- Identity types of eliminators
----------------------------------------

postulate
  Ôºùfst : (P : Type ‚Üí Type) (B : Œ£ Type P) (b‚ÇÄ b‚ÇÅ : fst B) ‚Üí (b‚ÇÄ Ôºù b‚ÇÅ) ‚â° (fst (refl B) // b‚ÇÄ ~ b‚ÇÅ)
  Ôºùsnd : {A : Type} (B : A √ó Type) (b‚ÇÄ b‚ÇÅ : snd B) ‚Üí (b‚ÇÄ Ôºù b‚ÇÅ) ‚â° (snd (refl B) // b‚ÇÄ ~ b‚ÇÅ)

{-# REWRITE Ôºùfst Ôºùsnd #-}
