{-# OPTIONS --exact-split --type-in-type --rewriting --two-level --without-K --no-import-sorts --no-projection-like #-}

module HOTT.Id where

open import HOTT.Base

infix  35 _Ôºù_

------------------------------
-- Homogeneous Id and refl
------------------------------

postulate
  _Ôºù_ : {A : Type} ‚Üí A ‚Üí A ‚Üí Type
  refl : {A : Type} (a : A) ‚Üí (a Ôºù a)

------------------------------
-- Dependent identity types
------------------------------

postulate
  Id : {A : Type} (B : A ‚Üí Type) {a‚ÇÄ a‚ÇÅ : A} (a‚ÇÇ : a‚ÇÄ Ôºù a‚ÇÅ) (b‚ÇÄ : B a‚ÇÄ) (b‚ÇÅ : B a‚ÇÅ) ‚Üí Type
  -- Id-idmap comes later, as it requires the universe
  Id-const : (A B : Type) {a‚ÇÄ a‚ÇÅ : A} (a‚ÇÇ : a‚ÇÄ Ôºù a‚ÇÅ) ‚Üí
    Id {A} (Œª _ ‚Üí B) a‚ÇÇ ‚â° _Ôºù_ {B}
  -- This should follow from the definitions in most concrete cases.
  -- I'm not sure about Id-Ôºù for a variable type; see Id-refl, and
  -- ap-refl, later on.
  Id-refl : {A : Type} (B : A ‚Üí Type) {a : A} ‚Üí
    Id B (refl a) ‚â° _Ôºù_ {B a}
{-# REWRITE Id-const Id-refl #-}

postulate
  ap : {A : Type} {B : A ‚Üí Type} (f : (x : A) ‚Üí B x)
    {a‚ÇÄ a‚ÇÅ : A} (a‚ÇÇ : a‚ÇÄ Ôºù a‚ÇÅ) ‚Üí Id B a‚ÇÇ (f a‚ÇÄ) (f a‚ÇÅ)
  ap-idmap : {A : Type} {a‚ÇÄ a‚ÇÅ : A} (a‚ÇÇ : a‚ÇÄ Ôºù a‚ÇÅ) ‚Üí
    ap {A} (Œª x ‚Üí x) a‚ÇÇ ‚â° a‚ÇÇ
  ap-const : {A B : Type} (b : B) {a‚ÇÄ a‚ÇÅ : A} (a‚ÇÇ : a‚ÇÄ Ôºù a‚ÇÅ) ‚Üí
    ap {A} (Œª _ ‚Üí b) a‚ÇÇ ‚â° refl b
  -- This should also be admissible in most concrete cases.
  ap-refl : {A : Type} {B : A ‚Üí Type} (f : (x : A) ‚Üí B x) (a : A) ‚Üí
    ap f (refl a) ‚â° refl (f a)
{-# REWRITE ap-const ap-idmap ap-refl #-}

----------------------------------------
-- Identifications and refl in ‚ä§
----------------------------------------

postulate
  Ôºù-‚ä§ : (u v : ‚ä§) ‚Üí (u Ôºù v) ‚â° ‚ä§
{-# REWRITE Ôºù-‚ä§ #-}
postulate
  refl‚òÖ : refl ‚òÖ ‚â° ‚òÖ
{-# REWRITE refl‚òÖ #-}

--------------------------------------------------
-- Identifications, refl, and ap in Œ£-types
--------------------------------------------------

postulate
  Ôºù-Œ£ : {A : Type} {B : A ‚Üí Type} (u v : Œ£ A B) ‚Üí
    (u Ôºù v) ‚â° Ôºà p ‚¶Ç fst u Ôºù fst v Ôºâ√ó Id B p (snd u) (snd v)
{-# REWRITE Ôºù-Œ£ #-}

postulate
  refl-, : {A : Type} {B : A ‚Üí Type} (a : A) (b : B a) ‚Üí
    refl {Œ£ A B} (a , b) ‚â° (refl a , refl b)
{-# REWRITE refl-, #-}

-- We want to rewrite (refl (snd u)) to (snd (refl u)), but this isn't
-- well-typed, because refl-fst and Id-refl are not confluent:
--- (refl (snd u)) has type (fst u Ôºù fst u)
--- (snd (refl u)) has type (Id B (fst (refl u)) (snd u) (snd u))
-- and these are not convertible by Agda, even though they are both
-- reducts of (Id B (refl (fst u)) (snd u) (snd u)), the first by
-- Id-refl and the second by refl-fst.

-- To work around this, we use the trick of declaring a rewrite in
-- between the type signature of a function and its definition.
-- Specifically, we give a name to the putative result of refl-snd,
-- giving it the type that reduces to the two incompatible things.
frob-refl-snd : {A : Type} {B : A ‚Üí Type} (u : Œ£ A B) ‚Üí
  Id B (refl (fst u)) (snd u) (snd u)

postulate
  refl-fst : {A : Type} {B : A ‚Üí Type} (u : Œ£ A B) ‚Üí
    refl (fst u) ‚â° fst (refl u)
  -- Since we haven't declared refl-fst to be a rewrite yet at this
  -- point, the type of frob-refl-snd reduces to (snd u Ôºù snd u) by
  -- Id-refl, so that it's well-typed here.
  refl-snd : {A : Type} {B : A ‚Üí Type} (u : Œ£ A B) ‚Üí
    refl (snd u) ‚â° frob-refl-snd u

{-# REWRITE refl-fst refl-snd #-}

-- Now after refl-fst is declared a rewrite, the type of frob-refl-snd
-- u reduces instead to (Id B (fst (refl u)) (snd u) (snd u)), so that
-- we can give (snd (refl u)) as its definition.
frob-refl-snd u = snd (refl u)

uncurry : {T : Type} {Œî : Type} {A : Œî ‚Üí Type} (B : (x : Œî) ‚Üí A x ‚Üí T) ‚Üí Œ£ Œî A ‚Üí T
uncurry B u = B (fst u) (snd u)

module _ (Œî : Type) (A : Œî ‚Üí Type) (B : (x : Œî) ‚Üí A x ‚Üí Type) where
  IdŒ£ : (Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî) (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) (u‚ÇÄ : Œ£ (A Œ¥‚ÇÄ) (B Œ¥‚ÇÄ)) (u‚ÇÅ : Œ£ (A Œ¥‚ÇÅ) (B Œ¥‚ÇÅ)) ‚Üí Type
  IdŒ£ Œ¥‚ÇÄ Œ¥‚ÇÅ Œ¥‚ÇÇ u‚ÇÄ u‚ÇÅ =
    Ôºà a‚ÇÇ ‚¶Ç Id A Œ¥‚ÇÇ (fst u‚ÇÄ) (fst u‚ÇÅ) Ôºâ√ó
      Id {Œ£ Œî A} (uncurry B) {Œ¥‚ÇÄ , fst u‚ÇÄ} {Œ¥‚ÇÅ , fst u‚ÇÅ} (Œ¥‚ÇÇ , a‚ÇÇ) (snd u‚ÇÄ) (snd u‚ÇÅ)

  postulate
    Id-Œ£ : {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) (u‚ÇÄ : Œ£ (A Œ¥‚ÇÄ) (B Œ¥‚ÇÄ)) (u‚ÇÅ : Œ£ (A Œ¥‚ÇÅ) (B Œ¥‚ÇÅ)) ‚Üí
      Id (Œª x ‚Üí Œ£ (A x) (B x)) Œ¥‚ÇÇ u‚ÇÄ u‚ÇÅ ‚â° IdŒ£ Œ¥‚ÇÄ Œ¥‚ÇÅ Œ¥‚ÇÇ u‚ÇÄ u‚ÇÅ
  {-# REWRITE Id-Œ£ #-}

  postulate
    ap-fst : (u : (Œ¥ : Œî) ‚Üí Œ£ (A Œ¥) (B Œ¥)) {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) ‚Üí
      ap (Œª Œ¥ ‚Üí fst (u Œ¥)) Œ¥‚ÇÇ ‚â° fst (ap u Œ¥‚ÇÇ)
    {-# REWRITE ap-fst #-}

-- ap-, and ap-snd are very difficult to define, so we postpone them to later.

------------------------------
-- Bundled identity types
------------------------------

-- TODO: Find a consistent naming scheme for these.

ID : Type ‚Üí Type
ID A = Ôºà a‚ÇÄ ‚¶Ç A Ôºâ√ó Ôºà a‚ÇÅ ‚¶Ç A Ôºâ√ó a‚ÇÄ Ôºù a‚ÇÅ

ID·µà : {Œî : Type} (A : Œî ‚Üí Type) {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) ‚Üí Type
ID·µà A {Œ¥‚ÇÄ} {Œ¥‚ÇÅ} Œ¥‚ÇÇ = Ôºà a‚ÇÄ ‚¶Ç A Œ¥‚ÇÄ Ôºâ√ó Ôºà a‚ÇÅ ‚¶Ç A Œ¥‚ÇÅ Ôºâ√ó Id A Œ¥‚ÇÇ a‚ÇÄ a‚ÇÅ

ID√ó : {A : Type} (B : A ‚áí Type) ‚Üí Type
ID√ó {A} B = Ôºà a‚ÇÄ ‚¶Ç A Ôºâ√ó Ôºà a‚ÇÅ ‚¶Ç A Ôºâ√ó Ôºà a‚ÇÇ ‚¶Ç a‚ÇÄ Ôºù a‚ÇÅ Ôºâ√ó B ‚àô a‚ÇÄ √ó B ‚àô a‚ÇÅ

Id·µà : {A : Type} (B : A ‚áí Type) ‚Üí ID√ó B ‚Üí Type
Id·µà {A} B u = Id (B ‚àô_) (‚ÇÉrd u) (‚ÇÑth u) (‚ÇÖth' u)

--------------------------------------------------
-- Identifications, refl, and ap in Œ†-types
--------------------------------------------------

postulate
  Ôºù-Œ† : {A : Type} {B : A ‚Üí Type} (f g : Œ† A B) ‚Üí
    (f Ôºù g) ‚â° Ôºà a‚Çì ‚¶Ç ID A Ôºâ‚áí Id B (‚ÇÉrd' a‚Çì) (f ‚àô ‚ÇÅst a‚Çì) (g ‚àô ‚ÇÇnd a‚Çì)
{-# REWRITE Ôºù-Œ† #-}

postulate
  refl-∆õ : {A : Type} {B : A ‚Üí Type} (f : (x : A) ‚Üí B x) (a‚Çì : ID A) ‚Üí
    refl (ùõå f) ‚àô a‚Çì ‚â° ap f (‚ÇÉrd' a‚Çì)
  refl-‚àô : {A : Type} {B : A ‚Üí Type} (f : Œ† A B) (a : A) ‚Üí
    refl (f ‚àô a) ‚â° refl f ‚àô (a , a , refl a)
{-# REWRITE refl-∆õ refl-‚àô #-}

IdŒ† : (Œî : Type) (A : Œî ‚Üí Type) (B : (x : Œî) ‚Üí A x ‚Üí Type)
    (Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî) (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) (f‚ÇÄ : Œ† (A Œ¥‚ÇÄ) (B Œ¥‚ÇÄ)) (f‚ÇÅ : Œ† (A Œ¥‚ÇÅ) (B Œ¥‚ÇÅ)) ‚Üí
    Type
IdŒ† Œî A B Œ¥‚ÇÄ Œ¥‚ÇÅ Œ¥‚ÇÇ f‚ÇÄ f‚ÇÅ =
  Ôºà a‚Çì ‚¶Ç ID·µà A Œ¥‚ÇÇ Ôºâ‚áí
    Id {Œ£ Œî A} (uncurry B) {Œ¥‚ÇÄ , ‚ÇÅst a‚Çì} {Œ¥‚ÇÅ , ‚ÇÇnd a‚Çì} (Œ¥‚ÇÇ , ‚ÇÉrd' a‚Çì)
      (f‚ÇÄ ‚àô ‚ÇÅst a‚Çì) (f‚ÇÅ ‚àô ‚ÇÇnd a‚Çì)

postulate
  Id-Œ† : {Œî : Type} {A : Œî ‚Üí Type} {B : (x : Œî) ‚Üí A x ‚Üí Type}
    {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ)
    (f‚ÇÄ : Œ† (A Œ¥‚ÇÄ) (B Œ¥‚ÇÄ)) (f‚ÇÅ : Œ† (A Œ¥‚ÇÅ) (B Œ¥‚ÇÅ)) ‚Üí
    Id (Œª x ‚Üí Œ† (A x) (B x)) Œ¥‚ÇÇ f‚ÇÄ f‚ÇÅ ‚â° IdŒ† Œî A B Œ¥‚ÇÄ Œ¥‚ÇÅ Œ¥‚ÇÇ f‚ÇÄ f‚ÇÅ
{-# REWRITE Id-Œ† #-}

postulate
  ap-∆õ : {Œî : Type} (A : Œî ‚Üí Type) (B : (x : Œî) ‚Üí A x ‚Üí Type)
    (f : (Œ¥ : Œî) (a : A Œ¥) ‚Üí B Œ¥ a)
    {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) (a‚Çì : ID·µà A Œ¥‚ÇÇ) ‚Üí
    ap (Œª x ‚Üí ∆õ y ‚áí f x y) Œ¥‚ÇÇ ‚àô a‚Çì ‚â°
    ap {Œ£ Œî A} (Œª z ‚Üí f (fst z) (snd z)) {Œ¥‚ÇÄ , ‚ÇÅst a‚Çì} {Œ¥‚ÇÅ , ‚ÇÇnd a‚Çì} (Œ¥‚ÇÇ , ‚ÇÉrd' a‚Çì)
{-# REWRITE ap-∆õ #-}

-- ap-‚àô is very difficult to define, so we postpone it to later.
