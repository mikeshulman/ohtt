{-# OPTIONS --exact-split --type-in-type --rewriting --two-level --without-K --no-import-sorts #-}

module HOTT.Sqrt where

open import HOTT.Base
open import HOTT.Id
-- The definition of ‚àö is in the Universe file, since it requires Id
-- and is required for the universe.
open import HOTT.Universe public
open import HOTT.Square.Simple

------------------------------
-- Identifications in ‚àö
------------------------------

‚àö‚Ä≤-I : {@‚ô≠ I : Type} (@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type) ‚Üí Type
‚àö‚Ä≤-I {I} A = Ôºà i‚ÇÄ ‚¶Ç I Ôºâ√ó Ôºà i‚ÇÅ ‚¶Ç I Ôºâ√ó Ôºà i‚ÇÇ ‚¶Ç i‚ÇÄ Ôºù i‚ÇÅ Ôºâ√ó ‚àö A i‚ÇÄ √ó ‚àö A i‚ÇÅ

‚àö‚Ä≤-A : {@‚ô≠ I : Type} (@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type) ‚Üí
  (u‚ÇÄ u‚ÇÅ : ‚àö‚Ä≤-I A) (u‚ÇÇ : u‚ÇÄ Ôºù u‚ÇÅ) ‚Üí Type
‚àö‚Ä≤-A {I} A u‚ÇÄ u‚ÇÅ u‚ÇÇ =
  Id {ID I} (Œª i‚Çì ‚Üí A (‚ÇÅst i‚Çì) (‚ÇÇnd i‚Çì) (‚ÇÉrd' i‚Çì))
    {‚ÇÅst u‚ÇÄ , ‚ÇÅst u‚ÇÅ , ‚ÇÅst u‚ÇÇ} {‚ÇÇnd u‚ÇÄ , ‚ÇÇnd u‚ÇÅ , ‚ÇÇnd u‚ÇÇ}
    -- NB: There is a symmetry here!
    (‚ÇÉrd u‚ÇÄ , ‚ÇÉrd u‚ÇÅ , sym I ‚îå‚îÄ     ‚ÇÇnd u‚ÇÇ     ‚îÄ‚îê
                             ‚ÇÉrd u‚ÇÄ   ‚ñ°    ‚ÇÉrd u‚ÇÅ
                             ‚îî‚îÄ     ‚ÇÅst u‚ÇÇ     ‚îÄ‚îò  (‚ÇÉrd u‚ÇÇ))
    (dig {I} {A} {‚ÇÅst u‚ÇÄ} {‚ÇÅst u‚ÇÅ} {‚ÇÅst u‚ÇÇ} {‚ÇÑth u‚ÇÄ} {‚ÇÑth u‚ÇÅ}
         (‚ÜêId-ap {Ôºà z ‚¶Ç I √ó I Ôºâ√ó fst z Ôºù snd z} {I} (Œª z ‚Üí fst (fst z)) (ùõå (‚àö A))
                 {(‚ÇÅst u‚ÇÄ , ‚ÇÇnd u‚ÇÄ) , ‚ÇÉrd u‚ÇÄ} {(‚ÇÅst u‚ÇÅ , ‚ÇÇnd u‚ÇÅ) , ‚ÇÉrd u‚ÇÅ} ((‚ÇÅst u‚ÇÇ , ‚ÇÇnd u‚ÇÇ) , ‚ÇÉrd u‚ÇÇ)
                 (‚ÇÑth u‚ÇÇ)))
    (dig {I} {A} {‚ÇÇnd u‚ÇÄ} {‚ÇÇnd u‚ÇÅ} {‚ÇÇnd u‚ÇÇ} {‚ÇÖth' u‚ÇÄ} {‚ÇÖth' u‚ÇÅ}
         (‚ÜêId-ap {Ôºà w ‚¶Ç Ôºà z ‚¶Ç I √ó I Ôºâ√ó fst z Ôºù snd z Ôºâ√ó ‚àö A (fst (fst w))} {I} (Œª z ‚Üí snd (fst (fst z))) (ùõå (‚àö A))
                 {((‚ÇÅst u‚ÇÄ , ‚ÇÇnd u‚ÇÄ) , ‚ÇÉrd u‚ÇÄ) , ‚ÇÑth u‚ÇÄ} {((‚ÇÅst u‚ÇÅ , ‚ÇÇnd u‚ÇÅ) , ‚ÇÉrd u‚ÇÅ) , ‚ÇÑth u‚ÇÅ} (((‚ÇÅst u‚ÇÇ , ‚ÇÇnd u‚ÇÇ) , ‚ÇÉrd u‚ÇÇ) , ‚ÇÑth u‚ÇÇ)
                 (‚ÇÖth' u‚ÇÇ)))

postulate
  Ôºù-‚àö : {@‚ô≠ I : Type} {@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type} (i : I) (s‚ÇÄ s‚ÇÅ : ‚àö A i) ‚Üí
    (s‚ÇÄ Ôºù s‚ÇÅ) ‚â°
    A i i (refl i) √ó ‚àö {‚àö‚Ä≤-I A} (‚àö‚Ä≤-A A) (i , i , refl i , s‚ÇÄ , s‚ÇÅ)
  Id-‚àö : {@‚ô≠ I : Type} {@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type}
    {Œî : Type} (i : Œî ‚Üí I) {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ)
    (s‚ÇÄ : ‚àö A (i Œ¥‚ÇÄ)) (s‚ÇÅ : ‚àö A (i Œ¥‚ÇÅ)) ‚Üí
    Id (Œª Œ¥ ‚Üí ‚àö A (i Œ¥)) Œ¥‚ÇÇ s‚ÇÄ s‚ÇÅ ‚â°
    A (i Œ¥‚ÇÄ) (i Œ¥‚ÇÅ) (ap i Œ¥‚ÇÇ) √ó ‚àö {‚àö‚Ä≤-I A} (‚àö‚Ä≤-A A) (i Œ¥‚ÇÄ , i Œ¥‚ÇÅ , ap i Œ¥‚ÇÇ , s‚ÇÄ , s‚ÇÅ)
{-# REWRITE Ôºù-‚àö Id-‚àö #-}

-- TODO: dig‚â°fst causes normalization loops in (A‚ÇÇ ‚Üì).  I think the
-- problem is that the fst that dig normalizes to has both types in
-- the √ó of Id-‚àö as parameters, but the second one includes some digs
-- in ‚àö‚Ä≤-A.  Thus, fully normalizing it ends up rewriting those digs
-- to fsts, and so on forever.

-- A possibly-ideal solution would be for Agda to implement rewriting
-- that matches on record projections.  Then our Œ£ could be a record
-- and fst wouldn't have parameters.

-- Lacking that, the best option I've thought of so far is to not make
-- dig‚â°fst a rewrite, but coerce across it when necessary.  We could
-- reduce the impact of this by also asserting dig-ap-bury directly as
-- a rewrite, which would hopefully allow making dig‚â°fst rewrite to
-- refl·µâ when applied to an ap-bury.
{-
postulate
  dig‚â°fst : {@‚ô≠ I : Type} {@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type}
    {i‚ÇÄ i‚ÇÅ : I} (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) {s‚ÇÄ : ‚àö A i‚ÇÄ} {s‚ÇÅ : ‚àö A i‚ÇÅ} (s‚ÇÇ : Id (‚àö A) i‚ÇÇ s‚ÇÄ s‚ÇÅ) ‚Üí
    dig {I} {A} {i‚ÇÄ} {i‚ÇÅ} {i‚ÇÇ} {s‚ÇÄ} {s‚ÇÅ} s‚ÇÇ ‚â° fst s‚ÇÇ
{-# REWRITE dig‚â°fst #-}

_ : {A‚ÇÄ A‚ÇÅ : Type} (A‚ÇÇ : A‚ÇÄ Ôºù A‚ÇÅ) ‚Üí {!A‚ÇÇ ‚Üì!}
-}

{-

------------------------------
-- Computation in ‚àö
------------------------------

-- Because dig computes to fst, there is no need for refl-dig or
-- ap-dig.  But we do need refl-bury and ap-bury.  Because ‚àö
-- semantically has a strict universal property, it makes sense to
-- compute these to pairs whose second components are actual "bury"s
-- for ‚àö‚Ä≤.  Note also that the *first* components of these pairs are
-- what ensure the Œ≤-rule for ‚àö, meaning the value of dig (i.e. fst)
-- composed with ap-bury.

postulate
  refl-bury : {@‚ô≠ I : Type} {@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type}
    {@‚ô≠ K : Type} (@‚ô≠ j : K ‚Üí I)
    (@‚ô≠ d : (k‚ÇÄ k‚ÇÅ : K) (k‚ÇÇ : k‚ÇÄ Ôºù k‚ÇÅ) ‚Üí A (j k‚ÇÄ) (j k‚ÇÅ) (ap j k‚ÇÇ)) (k : K) ‚Üí
    refl (bury A j d k) ‚â°
    (d k k (refl k) ,
     bury (‚àö‚Ä≤-A A) (Œª k ‚Üí (j k , j k , refl (j k) , bury A j d k , bury A j d k))
       (Œª k‚ÇÄ k‚ÇÅ k‚ÇÇ ‚Üí {!!})
       k)
--{-# REWRITE dig-refl-bury #-}

-- For the types to match in ap-bury, we need ap-ap functoriality for
-- j and k.  We can make this happen definitionally by wrapping one of
-- them in a ‚áí.
frob-ap-bury : {@‚ô≠ I : Type} (@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type)
  {@‚ô≠ K : Type} (@‚ô≠ j : K ‚áí I)
  (@‚ô≠ d : (k‚ÇÄ k‚ÇÅ : K) (k‚ÇÇ : k‚ÇÄ Ôºù k‚ÇÅ) ‚Üí A (j ‚àô k‚ÇÄ) (j ‚àô k‚ÇÅ) (ap (j ‚àô_) k‚ÇÇ))
  {Œî : Type} {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) (k : Œî ‚Üí K) ‚Üí
  (A (j ‚àô k Œ¥‚ÇÄ) (j ‚àô k Œ¥‚ÇÅ) (ap (Œª z ‚Üí j ‚àô k z) Œ¥‚ÇÇ)) √ó
  ‚àö (‚àö‚Ä≤-A (Œª i‚ÇÇ i‚ÇÅ i‚ÇÄ ‚Üí A i‚ÇÇ i‚ÇÅ i‚ÇÄ))
    (j ‚àô k Œ¥‚ÇÄ , j ‚àô k Œ¥‚ÇÅ , ap (Œª z ‚Üí j ‚àô k z) Œ¥‚ÇÇ , bury A (j ‚àô_) d (k Œ¥‚ÇÄ) , bury A (j ‚àô_) d (k Œ¥‚ÇÅ))
frob-ap-bury {I} A {K} j d {Œî} {Œ¥‚ÇÄ} {Œ¥‚ÇÅ} Œ¥‚ÇÇ k =
  (d (k Œ¥‚ÇÄ) (k Œ¥‚ÇÅ) (ap k Œ¥‚ÇÇ) ,
   bury (‚àö‚Ä≤-A A) {ID K} (Œª k‚Çì ‚Üí (j ‚àô ‚ÇÅst k‚Çì , j ‚àô ‚ÇÇnd k‚Çì , ap (j ‚àô_) (‚ÇÉrd' k‚Çì) , bury A (j ‚àô_) d (‚ÇÅst k‚Çì) , bury A (j ‚àô_) d (‚ÇÇnd k‚Çì)))
     (Œª k‚ÇÄ k‚ÇÅ k‚ÇÇ ‚Üí {!!})
     (k Œ¥‚ÇÄ , k Œ¥‚ÇÅ , ap k Œ¥‚ÇÇ))

postulate
  ap-bury : {@‚ô≠ I : Type} {@‚ô≠ A : (i‚ÇÄ i‚ÇÅ : I) (i‚ÇÇ : i‚ÇÄ Ôºù i‚ÇÅ) ‚Üí Type}
    {@‚ô≠ K : Type} (@‚ô≠ j : K ‚Üí I)
    (@‚ô≠ d : (k‚ÇÄ k‚ÇÅ : K) (k‚ÇÇ : k‚ÇÄ Ôºù k‚ÇÅ) ‚Üí A (j k‚ÇÄ) (j k‚ÇÅ) (ap j k‚ÇÇ))
    {Œî : Type} {Œ¥‚ÇÄ Œ¥‚ÇÅ : Œî} (Œ¥‚ÇÇ : Œ¥‚ÇÄ Ôºù Œ¥‚ÇÅ) (k : Œî ‚Üí K) ‚Üí
    ap (Œª Œ¥ ‚Üí bury A j d (k Œ¥)) Œ¥‚ÇÇ ‚â° frob-ap-bury A (ùõå j) d Œ¥‚ÇÇ k
--{-# REWRITE dig-ap-bury #-}
-}
