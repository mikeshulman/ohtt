{-# OPTIONS --exact-split --type-in-type --rewriting --two-level --without-K #-}

module HOTT.Categories where

open import HOTT.Rewrite hiding (cong; rev)
open import HOTT.Telescope
open import HOTT.Id
open import HOTT.Refl
open import HOTT.Transport
open import HOTT.Square.Base
open import HOTT.Fill
open import HOTT.Pi.Base
open import HOTT.Sigma.Base
open import HOTT.Groupoids

------------------------------
-- Some more path algebra
------------------------------

cancelR : {A : Type} {a b c : A} {p q : a Ôºù b} (r : b Ôºù c) ‚Üí
  (_‚äô_ {A} p r Ôºù _‚äô_ {A} q r) ‚Üí (p Ôºù q)
cancelR {A} {a} {b} {c} {p} {q} = ùêâ (Œª c r ‚Üí (_‚äô_ {A} p r Ôºù _‚äô_ {A} q r) ‚Üí (p Ôºù q))
  (Œª s ‚Üí begin
           p
         Ôºù‚ü® rev {a Ôºù b} (‚äôrefl {A} p) ‚ü©
           _‚äô_ {A} p (refl b)
         Ôºù‚ü® s ‚ü©
           _‚äô_ {A} q (refl b)
         Ôºù‚ü® ‚äôrefl {A} q ‚ü©
           q
         ‚àé) c

isContr-contraction : {A : Type} (a : A) ‚Üí (Œ†[ b ‚¶Ç A ] a Ôºù b) ‚Üí isContr A
isContr-contraction {A} a ctr = (a , (∆õ x ‚áí ∆õ y ‚áí _‚äô_ {A} (rev {A} (ctr ‚àô x)) (ctr ‚àô y)))

Ôºùcong-IdFÔºù : {A B : Type} (f : A ‚áí B) {a‚ÇÄ a‚ÇÅ : A} (a‚ÇÇ : a‚ÇÄ Ôºù a‚ÇÅ) (b : B)
  (p : f ‚àô a‚ÇÄ Ôºù b) (q : f ‚àô a‚ÇÅ Ôºù b)
  (e : Id {Œµ‚ñ∏ A} (Œõ w ‚á® f ‚àô top w Ôºù b) ([] ‚à∑ a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ) p q) ‚Üí
  p Ôºù _‚äô_ {B} (cong f a‚ÇÇ) q
Ôºùcong-IdFÔºù {A} {B} f {a‚ÇÄ} {a‚ÇÅ} a‚ÇÇ b p q e =
  ùêâ (Œª a‚ÇÅ a‚ÇÇ ‚Üí (q : f ‚àô a‚ÇÅ Ôºù b) (e : Id {Œµ‚ñ∏ A} (Œõ w ‚á® f ‚àô top w Ôºù b) ([] ‚à∑ a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ) p q) ‚Üí
       p Ôºù _‚äô_ {B} (cong f a‚ÇÇ) q) (Œª q e ‚Üí rev {f ‚àô a‚ÇÄ Ôºù b}
       (begin
          _‚äô_ {B} (cong f (refl a‚ÇÄ)) q
        Ôºù‚ü®‚ü©
          _‚äô_ {B} (refl (f ‚àô a‚ÇÄ)) q
        Ôºù‚ü® refl‚äô {B} q ‚ü©
          q
        Ôºù‚ü® rev {f ‚àô a‚ÇÄ Ôºù b} e ‚ü©
          p
        ‚àé
       )) a‚ÇÅ a‚ÇÇ q e

----------------------------------------
-- Initial objects in wild categories
----------------------------------------

-- We prove our general results in a module parametrized by a wild category

module Cat (A : Type)
  (_‚ü∂_ : A ‚Üí A ‚Üí Type)
  (_Ôºõ_ : {a b c : A} ‚Üí (a ‚ü∂ b) ‚Üí (b ‚ü∂ c) ‚Üí (a ‚ü∂ c))
  (id : (a : A) ‚Üí (a ‚ü∂ a))
  (idÔºõ : {a b : A} (f : a ‚ü∂ b) ‚Üí ((id a Ôºõ f) Ôºù f))
  (Ôºõid : {a b : A} (f : a ‚ü∂ b) ‚Üí ((f Ôºõ id b) Ôºù f))
  (ÔºõÔºõ : {a b c d : A} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) ‚Üí ((f Ôºõ g) Ôºõ h) Ôºù (f Ôºõ (g Ôºõ h)))
  where
  
  -- An initial object has a unique morphism to every other object.
  isInit : (a : A) ‚Üí Type
  isInit a = Œ†[ b ‚¶Ç A ] isContr (a ‚ü∂ b)

  -- If an object is the vertex of an (incoherent!) cone over the
  -- identity functor, and the component of the cone at itself is the
  -- identity, then it is initial.
  isInit-cone : {a : A}
    (proj : (b : A) ‚Üí (a ‚ü∂ b))
    (nat : (b c : A) (f : b ‚ü∂ c) ‚Üí (proj b Ôºõ f) Ôºù proj c)
    (pid : proj a Ôºù id a) ‚Üí
    isInit a
  isInit-cone {a} proj nat pid = ∆õ b ‚áí isContr-contraction (proj b) (∆õ f ‚áí
    (begin
      proj b
    Ôºù‚ü® rev {a ‚ü∂ b} (nat _ _ f) ‚ü©
      (proj a Ôºõ f)
    Ôºù‚ü® cong {a ‚ü∂ a} {a ‚ü∂ b} (∆õ g ‚áí (g Ôºõ f)) pid ‚ü©
      (id a Ôºõ f)
    Ôºù‚ü® idÔºõ f ‚ü©
      f
    ‚àé))

  -- We consider how to construct initial objects from "2-coherent
  -- weakly initial" ones: this means they are equipped with a cone
  -- over the identity functor, plus one coherence law for composition
  -- of the cone triangles.
  record wkInit (a : A) : Type where
    field
      proj : (b : A) ‚Üí (a ‚ü∂ b)
      nat : {b c : A} (f : b ‚ü∂ c) ‚Üí (proj b Ôºõ f) Ôºù proj c
      coh : {b c d : A} (f : b ‚ü∂ c) (g : c ‚ü∂ d) ‚Üí
        _‚äô_ {a ‚ü∂ d} (cong {a ‚ü∂ c} (∆õ p ‚áí (p Ôºõ g)) (nat f)) (nat g) Ôºù
        _‚äô_ {a ‚ü∂ d} (ÔºõÔºõ (proj b) f g) (nat (f Ôºõ g))
  open wkInit

  -- We will construct initial objects from weakly inital ones by
  -- splitting an idempotent.  It's not possible to split fully
  -- incoherent idempotents (with just idem and I, below) in general,
  -- but one more coherence suffices.
  record qIdem (a : A) : Type where
    field
      idem : a ‚ü∂ a
      I : (idem Ôºõ idem) Ôºù idem
      J : cong {a ‚ü∂ a} (∆õ f ‚áí (f Ôºõ idem)) I Ôºù _‚äô_ {a ‚ü∂ a} (ÔºõÔºõ idem idem idem) (cong {a ‚ü∂ a} (∆õ f ‚áí (idem Ôºõ f)) I)
  open qIdem

  -- For any weakly initial object, the component of its cone at
  -- itself (which would be the identity for an actual initial object)
  -- is a quasi-idempotent.
  qIdem-wkInit : {a : A} (ai : wkInit a) ‚Üí qIdem a
  idem (qIdem-wkInit {a} ai) = proj ai a
  I (qIdem-wkInit {a} ai) = nat ai (proj ai a)
  J (qIdem-wkInit {a} ai) =
    let t = proj ai a in
    cancelR {a ‚ü∂ a}
            {p = cong (∆õ‚áí (Œª f ‚Üí f Ôºõ t)) (nat ai t)}
            {q = _‚äô_ {a ‚ü∂ a} (ÔºõÔºõ t t t) (cong (∆õ‚áí (_Ôºõ_ t)) (nat ai t))}
            (nat ai t)
            (begin
              _‚äô_ {a ‚ü∂ a} (cong (∆õ‚áí (Œª f ‚Üí f Ôºõ t)) (nat ai t)) (nat ai t)
            Ôºù‚ü® coh ai t t ‚ü©
              _‚äô_ {a ‚ü∂ a} (ÔºõÔºõ t t t) (nat ai (t Ôºõ t))
            Ôºù‚ü® cong (∆õ p ‚áí _‚äô_ {a ‚ü∂ a} (ÔºõÔºõ t t t) p)
                    (Ôºùcong-IdFÔºù (∆õ‚áí (_Ôºõ_ (proj ai a))) (nat ai (proj ai a)) (proj ai a)
                                 (nat ai (proj ai a Ôºõ proj ai a)) (nat ai (proj ai a))
                                 (refl {Œ†[ f ‚¶Ç a ‚ü∂ a ] (t Ôºõ f) Ôºù t} (∆õ f ‚áí nat ai f) ‚àô (t Ôºõ t) ‚àô t ‚àô (nat ai t))) ‚ü©
              _‚äô_ {a ‚ü∂ a} (ÔºõÔºõ t t t)
                (_‚äô_ {a ‚ü∂ a}
                  (cong (∆õ‚áí (_Ôºõ_ t)) (nat ai t))
                  (nat ai t))
            Ôºù‚ü® rev {((t Ôºõ t) Ôºõ t) Ôºù t} (‚äôassoc {a ‚ü∂ a}
                   (ÔºõÔºõ (t) (t) (t))
                   (cong (∆õ‚áí (_Ôºõ_ (t))) (nat ai (t)))
                   (nat ai (t))) ‚ü©
              _‚äô_ {a ‚ü∂ a} (_‚äô_ {a ‚ü∂ a} (ÔºõÔºõ t t t) (cong (∆õ‚áí (_Ôºõ_ t)) (nat ai t))) (nat ai t)
             ‚àé)

  -- What it means to split an idempotent.  Actually we can define a
  -- "splitting" of any endomorphism.
  record splitting {a : A} (i : a ‚ü∂ a) : Type where
    field
      retract : A
      retr : a ‚ü∂ retract
      sect : retract ‚ü∂ a
      isretr : (sect Ôºõ retr) Ôºù id retract
      isIdem : (retr Ôºõ sect) Ôºù i

  open splitting

  -- If we have a weakly initial object, and its canonical idempotent
  -- splits, then the splitting object is actually initial.
  init-fromwk : {a : A} (ai : wkInit a) (spl : splitting (proj ai a)) ‚Üí isInit (retract spl)
  init-fromwk {a} ai spl = isInit-cone
    (Œª b ‚Üí sect spl Ôºõ proj ai b)
    (Œª b c f ‚Üí
      (begin
         ((sect spl Ôºõ proj ai b) Ôºõ f)
       Ôºù‚ü® ÔºõÔºõ (sect spl) (proj ai b) f ‚ü©
         (sect spl Ôºõ (proj ai b Ôºõ f))
       Ôºù‚ü® cong {a ‚ü∂ c} (∆õ g ‚áí (sect spl Ôºõ g)) (nat ai f) ‚ü©
         (sect spl Ôºõ proj ai c)
       ‚àé))
    (_‚äô_ {retract spl ‚ü∂ retract spl} (cong {a ‚ü∂ retract spl} (∆õ g ‚áí (sect spl Ôºõ g))
      (begin
        proj ai (retract spl)
      Ôºù‚ü® rev {a ‚ü∂ retract spl} (Ôºõid _) ‚ü©
        proj ai (retract spl) Ôºõ id (retract spl)
      Ôºù‚ü® cong (∆õ g ‚áí (proj ai (retract spl) Ôºõ g)) (rev {retract spl ‚ü∂ retract spl} (isretr spl)) ‚ü©
        proj ai (retract spl) Ôºõ (sect spl Ôºõ retr spl)
      Ôºù‚ü® rev {a ‚ü∂ retract spl} (ÔºõÔºõ _ _ _) ‚ü©
        (proj ai (retract spl) Ôºõ sect spl) Ôºõ retr spl
      Ôºù‚ü® cong (∆õ g ‚áí (g Ôºõ retr spl)) (nat ai (sect spl)) ‚ü©
        proj ai a Ôºõ retr spl
      Ôºù‚ü® cong (∆õ g ‚áí (g Ôºõ retr spl)) (rev {a ‚ü∂ a} (isIdem spl))  ‚ü©
        (retr spl Ôºõ sect spl) Ôºõ retr spl
      Ôºù‚ü® ÔºõÔºõ _ _ _ ‚ü©
        retr spl Ôºõ (sect spl Ôºõ retr spl)
      Ôºù‚ü® cong (∆õ g ‚áí (retr spl Ôºõ g)) (isretr spl) ‚ü©
        retr spl Ôºõ id (retract spl)
      Ôºù‚ü® Ôºõid (retr spl) ‚ü©
        retr spl
      ‚àé))
      (isretr spl))

  -- We should be able to construct splittings of idempotents from
  -- countable sequential limits.  Then to apply this in any
  -- particular case, we just have to verify the existence of such
  -- limits, and construct a weakly initial object (usually by an
  -- impredicative "2-coherent wild limit" over the identity functor).
